// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// CORE MODELS
// ===================================

// 1. Модель Ролей
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // ADMIN, CREATOR
  users User[]
}

// 2. Модель Пользователей
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  username String  @unique
  isActive Boolean @default(true)

  googleId   String? @unique
  facebookId String? @unique

  roleId Int  @default(1)
  role   Role @relation(fields: [roleId], references: [id])

  likedItems ItemLike[]

  itemsCreated Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  inventories Inventory[] // Инвентари, которыми владеет пользователь
  accesses    InventoryAccess[] // Инвентари, к которым пользователь имеет доступ
  comments    Comment[] // Комментарии пользователя
}

// 3. Модель Категории
model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventories Inventory[]
}

// 4. Модель Инвентаризации (Inventory)
model Inventory {
  id          String  @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean @default(true)
  version     Int     @default(1)
  itemsCount  Int     @default(0)

  customIdFormat Json?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  items        Item[]
  accesses     InventoryAccess[]
  comments     Comment[]
  customFields CustomField[]

  tags InventoryTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 5. Модель Доступа к Инвентаризации (InventoryAccess)
model InventoryAccess {
  id String @id @default(cuid())

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  canEdit Boolean @default(false)

  @@unique([inventoryId, userId])
}

// 6. Модель Предметов (Item)
model Item {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  customId    String
  name        String
  description String?
  status      String  @default("available")

  likes        ItemLike[]
  likesCount   Int                @default(0)
  customValues CustomFieldValue[]

  version Int @default(1)

  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([inventoryId, customId])
  @@index([inventoryId])
}

// 7. Модель Комментариев (Comment)
model Comment {
  id      String @id @default(cuid())
  content String

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([inventoryId])
}

// 8. Модель кастомных полей инвентаря
model CustomField {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  name        String
  description String?
  type        FieldType
  showInTable Boolean   @default(true)
  order       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  values CustomFieldValue[]

  @@unique([inventoryId, name])
}

// 9. Модель значения кастомного поля
model CustomFieldValue {
  id            String      @id @default(cuid())
  itemId        String
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  customFieldId String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  value         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([itemId, customFieldId])
}

// 10. Модель типов 
enum FieldType {
  SINGLE_LINE
  MULTI_LINE
  NUMERIC
  LINK
  BOOLEAN
}

// 11. Модель лайков
model ItemLike {
  id String @id @default(cuid())

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([itemId, userId]) // один лайк от одного пользователя
  @@index([userId]) // ускоряет выборку лайков по пользователю
}

// 12. Модель тегов
model Tag {
  id          String         @id @default(cuid())
  name        String         @unique
  inventories InventoryTag[]
}

// 13. 
model InventoryTag {
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  tagId       String
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@id([inventoryId, tagId])
}
