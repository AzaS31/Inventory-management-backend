// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// CORE MODELS
// ===================================

// 1. Модель Ролей
model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique // ADMIN, CREATOR
  users User[]
}

// 2. Модель Пользователей
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String?
  username   String   @unique
  isActive   Boolean  @default(true)

  googleId   String?  @unique
  facebookId String?  @unique

  roleId     Int      @default(1)
  role       Role     @relation(fields: [roleId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Связи
  inventories Inventory[]       // Инвентари, которыми владеет пользователь
  accesses    InventoryAccess[] // Инвентари, к которым пользователь имеет доступ
  comments    Comment[]         // Комментарии пользователя
}

// 3. Модель Инвентаризации (Inventory)
model Inventory {
  id          String            @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean           @default(true) // публичный или приватный
  version     Int               @default(1)    // для оптимистической блокировки

  ownerId     String
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Связи
  items       Item[]
  accesses    InventoryAccess[]
  comments    Comment[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// 4. Модель Доступа к Инвентаризации (InventoryAccess)
model InventoryAccess {
  id            String    @id @default(cuid())

  inventoryId   String
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  role          String    @default("EDITOR") // тип доступа: VIEWER / EDITOR / OWNER

  @@unique([inventoryId, userId])
}

// 5. Модель Предметов (Item)
model Item {
  id            String    @id @default(cuid())
  inventoryId   String
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  customId      String   // уникальный ID внутри инвентаря
  name          String   // имя предмета
  description   String?  // описание
  status        String   @default("available") // например: available, taken, damaged

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([inventoryId, customId])
}

// 6. Модель Комментариев (Comment)
model Comment {
  id          String    @id @default(cuid())
  content     String

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
}
